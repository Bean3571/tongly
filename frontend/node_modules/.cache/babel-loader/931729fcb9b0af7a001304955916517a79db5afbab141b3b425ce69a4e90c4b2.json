{"ast":null,"code":"import axios from 'axios';\nconst baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconsole.log('API Client initialized with baseURL:', baseURL);\nconst apiClient = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Request:', {\n      method: config.method,\n      url: config.url,\n      headers: {\n        ...config.headers,\n        Authorization: 'Bearer [REDACTED]'\n      }\n    });\n  } else {\n    console.log('Request:', {\n      method: config.method,\n      url: config.url,\n      headers: config.headers\n    });\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  console.log('Response:', {\n    status: response.status,\n    url: response.config.url,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2, _error$response3;\n  console.error('Response error:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message\n  });\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    console.log('Unauthorized access, redirecting to login');\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const api = {\n  auth: {\n    login: async credentials => {\n      try {\n        const response = await apiClient.post('/api/auth/login', credentials);\n        return response.data;\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n      }\n    },\n    register: async data => {\n      try {\n        const response = await apiClient.post('/api/auth/register', data);\n        return response.data;\n      } catch (error) {\n        console.error('Registration failed:', error);\n        throw error;\n      }\n    }\n  },\n  user: {\n    getProfile: async () => {\n      try {\n        const response = await apiClient.get('/api/profile');\n        return response.data;\n      } catch (error) {\n        console.error('Failed to get profile:', error);\n        throw error;\n      }\n    },\n    updateProfile: async data => {\n      try {\n        const response = await apiClient.put('/api/profile', data);\n        return response.data;\n      } catch (error) {\n        console.error('Failed to update profile:', error);\n        throw error;\n      }\n    },\n    updatePassword: async (oldPassword, newPassword) => {\n      try {\n        const response = await apiClient.put('/api/profile/password', {\n          oldPassword,\n          newPassword\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Failed to update password:', error);\n        throw error;\n      }\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","console","log","apiClient","create","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","method","url","error","Promise","reject","response","status","data","_error$config","_error$response","_error$response2","_error$response3","message","removeItem","window","location","href","api","auth","login","credentials","post","register","user","getProfile","get","updateProfile","put","updatePassword","oldPassword","newPassword"],"sources":["C:/Custom/Coding/tongly-basic/tongly-basic/frontend/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\nimport type { AxiosRequestConfig } from 'axios/index';\nimport { Gender, LanguageLevel } from '../types';\n\nconst baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconsole.log('API Client initialized with baseURL:', baseURL);\n\nconst apiClient = axios.create({\n    baseURL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Request interceptor\napiClient.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token && config.headers) {\n            config.headers.Authorization = `Bearer ${token}`;\n            console.log('Request:', {\n                method: config.method,\n                url: config.url,\n                headers: {\n                    ...config.headers,\n                    Authorization: 'Bearer [REDACTED]'\n                }\n            });\n        } else {\n            console.log('Request:', {\n                method: config.method,\n                url: config.url,\n                headers: config.headers\n            });\n        }\n        return config;\n    },\n    (error) => {\n        console.error('Request error:', error);\n        return Promise.reject(error);\n    }\n);\n\n// Response interceptor\napiClient.interceptors.response.use(\n    (response) => {\n        console.log('Response:', {\n            status: response.status,\n            url: response.config.url,\n            data: response.data\n        });\n        return response;\n    },\n    (error) => {\n        console.error('Response error:', {\n            url: error.config?.url,\n            status: error.response?.status,\n            data: error.response?.data,\n            message: error.message\n        });\n\n        if (error.response?.status === 401) {\n            console.log('Unauthorized access, redirecting to login');\n            localStorage.removeItem('token');\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\ninterface LoginCredentials {\n    username: string;\n    password: string;\n}\n\ninterface RegisterData {\n    username: string;\n    email: string;\n    password: string;\n    role: string;\n}\n\nexport interface ProfileUpdateData {\n    email?: string;\n    first_name?: string | null;\n    last_name?: string | null;\n    profile_picture?: string | null;\n    age?: number | null;\n    gender?: Gender | null;\n    native_language?: string | null;\n    languages?: LanguageLevel[];\n    interests?: string[];\n    learning_goals?: string[];\n    survey_complete?: boolean;\n}\n\nexport const api = {\n    auth: {\n        login: async (credentials: LoginCredentials) => {\n            try {\n                const response = await apiClient.post('/api/auth/login', credentials);\n                return response.data;\n            } catch (error) {\n                console.error('Login failed:', error);\n                throw error;\n            }\n        },\n        register: async (data: RegisterData) => {\n            try {\n                const response = await apiClient.post('/api/auth/register', data);\n                return response.data;\n            } catch (error) {\n                console.error('Registration failed:', error);\n                throw error;\n            }\n        },\n    },\n    user: {\n        getProfile: async () => {\n            try {\n                const response = await apiClient.get('/api/profile');\n                return response.data;\n            } catch (error) {\n                console.error('Failed to get profile:', error);\n                throw error;\n            }\n        },\n        updateProfile: async (data: ProfileUpdateData) => {\n            try {\n                const response = await apiClient.put('/api/profile', data);\n                return response.data;\n            } catch (error) {\n                console.error('Failed to update profile:', error);\n                throw error;\n            }\n        },\n        updatePassword: async (oldPassword: string, newPassword: string) => {\n            try {\n                const response = await apiClient.put('/api/profile/password', { oldPassword, newPassword });\n                return response.data;\n            } catch (error) {\n                console.error('Failed to update password:', error);\n                throw error;\n            }\n        },\n    },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}