{"ast":null,"code":"var _jsxFileName = \"C:\\\\Custom\\\\Coding\\\\tongly-basic\\\\tongly-basic\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n    document.documentElement.classList.toggle('dark', !isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(ThemeProvider, \"vYJNNV25FHwH0TTZOrX//UDd4kA=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","toggleTheme","prev","document","documentElement","classList","toggle","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Custom/Coding/tongly-basic/tongly-basic/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\ntype ThemeContextType = {\r\n    isDarkMode: boolean;\r\n    toggleTheme: () => void;\r\n};\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider = ({ children }: { children: React.ReactNode }) => {\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n    const toggleTheme = () => {\r\n        setIsDarkMode((prev) => !prev);\r\n        document.documentElement.classList.toggle('dark', !isDarkMode);\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useTheme = () => {\r\n    const context = useContext(ThemeContext);\r\n    if (!context) {\r\n        throw new Error('useTheme must be used within a ThemeProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnE,MAAMC,YAAY,gBAAGL,aAAa,CAA+BM,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAwC,CAAC,KAAK;EAAAC,EAAA;EAC1E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACtBD,aAAa,CAAEE,IAAI,IAAK,CAACA,IAAI,CAAC;IAC9BC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,EAAE,CAACP,UAAU,CAAC;EAClE,CAAC;EAED,oBACIN,OAAA,CAACC,YAAY,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAET,UAAU;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EACrDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAACd,EAAA,CAbWF,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAe1B,OAAO,MAAMkB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC1B,MAAMC,OAAO,GAAG1B,UAAU,CAACI,YAAY,CAAC;EACxC,IAAI,CAACsB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACnE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}