{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconsole.log('API Client initialized with baseURL:', API_BASE_URL);\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Request:', {\n      method: config.method,\n      url: config.url,\n      headers: {\n        ...config.headers,\n        Authorization: 'Bearer [REDACTED]'\n      }\n    });\n  } else {\n    console.log('Request:', {\n      method: config.method,\n      url: config.url,\n      headers: config.headers\n    });\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  console.log('Response:', {\n    status: response.status,\n    url: response.config.url,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2, _error$response3;\n  console.error('Response error:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message\n  });\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    console.log('Unauthorized access, redirecting to login');\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nasync function handleResponse(response) {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => null);\n    throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.message) || response.statusText);\n  }\n  return response.json();\n}\nexport const api = {\n  auth: {\n    login: async credentials => {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(credentials)\n      });\n      return handleResponse(response);\n    },\n    register: async data => {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      return handleResponse(response);\n    }\n  },\n  user: {\n    getProfile: async () => {\n      const response = await fetch(`${API_BASE_URL}/users/profile`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      return handleResponse(response);\n    },\n    updateProfile: async data => {\n      const response = await fetch(`${API_BASE_URL}/users/profile`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(data)\n      });\n      return handleResponse(response);\n    },\n    updatePassword: async (oldPassword, newPassword) => {\n      const response = await fetch(`${API_BASE_URL}/users/password`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          oldPassword,\n          newPassword\n        })\n      });\n      return handleResponse(response);\n    }\n  },\n  tutor: {\n    register: async data => {\n      const response = await fetch(`${API_BASE_URL}/tutors/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(data)\n      });\n      return handleResponse(response);\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","console","log","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","method","url","error","Promise","reject","response","status","data","_error$config","_error$response","_error$response2","_error$response3","message","removeItem","window","location","href","handleResponse","ok","errorData","json","catch","Error","statusText","api","auth","login","credentials","fetch","body","JSON","stringify","register","user","getProfile","updateProfile","updatePassword","oldPassword","newPassword","tutor"],"sources":["C:/Custom/Coding/tongly-basic/tongly-basic/frontend/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\nimport type { AxiosRequestConfig } from 'axios/index';\nimport { Gender, LanguageLevel, LoginCredentials, RegisterData, ProfileUpdateData, TutorRegistrationData } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconsole.log('API Client initialized with baseURL:', API_BASE_URL);\n\nconst apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Request interceptor\napiClient.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token && config.headers) {\n            config.headers.Authorization = `Bearer ${token}`;\n            console.log('Request:', {\n                method: config.method,\n                url: config.url,\n                headers: {\n                    ...config.headers,\n                    Authorization: 'Bearer [REDACTED]'\n                }\n            });\n        } else {\n            console.log('Request:', {\n                method: config.method,\n                url: config.url,\n                headers: config.headers\n            });\n        }\n        return config;\n    },\n    (error) => {\n        console.error('Request error:', error);\n        return Promise.reject(error);\n    }\n);\n\n// Response interceptor\napiClient.interceptors.response.use(\n    (response) => {\n        console.log('Response:', {\n            status: response.status,\n            url: response.config.url,\n            data: response.data\n        });\n        return response;\n    },\n    (error) => {\n        console.error('Response error:', {\n            url: error.config?.url,\n            status: error.response?.status,\n            data: error.response?.data,\n            message: error.message\n        });\n\n        if (error.response?.status === 401) {\n            console.log('Unauthorized access, redirecting to login');\n            localStorage.removeItem('token');\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\nasync function handleResponse(response: Response) {\n    if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error(errorData?.message || response.statusText);\n    }\n    return response.json();\n}\n\nexport const api = {\n    auth: {\n        login: async (credentials: LoginCredentials) => {\n            const response = await fetch(`${API_BASE_URL}/auth/login`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify(credentials),\n            });\n            return handleResponse(response);\n        },\n        register: async (data: RegisterData) => {\n            const response = await fetch(`${API_BASE_URL}/auth/register`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            });\n            return handleResponse(response);\n        },\n    },\n    user: {\n        getProfile: async () => {\n            const response = await fetch(`${API_BASE_URL}/users/profile`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n            });\n            return handleResponse(response);\n        },\n        updateProfile: async (data: ProfileUpdateData) => {\n            const response = await fetch(`${API_BASE_URL}/users/profile`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify(data),\n            });\n            return handleResponse(response);\n        },\n        updatePassword: async (oldPassword: string, newPassword: string) => {\n            const response = await fetch(`${API_BASE_URL}/users/password`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify({ oldPassword, newPassword }),\n            });\n            return handleResponse(response);\n        },\n    },\n    tutor: {\n        register: async (data: TutorRegistrationData) => {\n            const response = await fetch(`${API_BASE_URL}/tutors/register`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify(data),\n            });\n            return handleResponse(response);\n        },\n    },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}