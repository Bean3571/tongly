{"ast":null,"code":"var _jsxFileName = \"C:\\\\Custom\\\\Coding\\\\tongly-basic\\\\tongly-basic\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../api/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  refreshUser: async () => {}\n});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  const login = async (username, password) => {\n    try {\n      const response = await api.auth.login({\n        username,\n        password\n      });\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      await api.auth.register({\n        username,\n        email,\n        password,\n        role: 'student'\n      });\n      await login(username, password);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    navigate('/login');\n  };\n  const refreshUser = async () => {\n    try {\n      const userData = await api.user.getProfile();\n      setUser(userData);\n    } catch (error) {\n      console.error('Failed to refresh user data:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      refreshUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"6IF8oi2v+FFFMVJXFQinFj68c40=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useNavigate","api","jsxDEV","_jsxDEV","AuthContext","user","login","register","logout","refreshUser","useAuth","_s","AuthProvider","children","_s2","setUser","navigate","username","password","response","auth","localStorage","setItem","token","error","console","email","role","removeItem","userData","getProfile","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Custom/Coding/tongly-basic/tongly-basic/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { api } from '../api/client';\r\nimport type { User } from '../types';\r\n\r\ninterface AuthContextType {\r\n    user: User | null;\r\n    login: (username: string, password: string) => Promise<void>;\r\n    register: (username: string, email: string, password: string) => Promise<void>;\r\n    logout: () => void;\r\n    refreshUser: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n    user: null,\r\n    login: async () => {},\r\n    register: async () => {},\r\n    logout: () => {},\r\n    refreshUser: async () => {},\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const [user, setUser] = useState<User | null>(null);\r\n    const navigate = useNavigate();\r\n\r\n    const login = async (username: string, password: string) => {\r\n        try {\r\n            const response = await api.auth.login({ username, password });\r\n            localStorage.setItem('token', response.token);\r\n            setUser(response.user);\r\n            navigate('/dashboard');\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const register = async (username: string, email: string, password: string) => {\r\n        try {\r\n            await api.auth.register({ username, email, password, role: 'student' });\r\n            await login(username, password);\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n        navigate('/login');\r\n    };\r\n\r\n    const refreshUser = async () => {\r\n        try {\r\n            const userData = await api.user.getProfile();\r\n            setUser(userData);\r\n        } catch (error) {\r\n            console.error('Failed to refresh user data:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, register, logout, refreshUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWpC,MAAMC,WAAW,gBAAGP,aAAa,CAAkB;EAC/CQ,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EACrBC,QAAQ,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EACxBC,MAAM,EAAEA,CAAA,KAAM,CAAC,CAAC;EAChBC,WAAW,EAAE,MAAAA,CAAA,KAAY,CAAC;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMb,UAAU,CAACM,WAAW,CAAC;AAAA;AAACO,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACnF,MAAM,CAACT,IAAI,EAAEU,OAAO,CAAC,GAAGhB,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAMiB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAE9B,MAAMM,KAAK,GAAG,MAAAA,CAAOW,QAAgB,EAAEC,QAAgB,KAAK;IACxD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAACd,KAAK,CAAC;QAAEW,QAAQ;QAAEC;MAAS,CAAC,CAAC;MAC7DG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,KAAK,CAAC;MAC7CR,OAAO,CAACI,QAAQ,CAACd,IAAI,CAAC;MACtBW,QAAQ,CAAC,YAAY,CAAC;IAC1B,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMjB,QAAQ,GAAG,MAAAA,CAAOU,QAAgB,EAAES,KAAa,EAAER,QAAgB,KAAK;IAC1E,IAAI;MACA,MAAMjB,GAAG,CAACmB,IAAI,CAACb,QAAQ,CAAC;QAAEU,QAAQ;QAAES,KAAK;QAAER,QAAQ;QAAES,IAAI,EAAE;MAAU,CAAC,CAAC;MACvE,MAAMrB,KAAK,CAACW,QAAQ,EAAEC,QAAQ,CAAC;IACnC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMhB,MAAM,GAAGA,CAAA,KAAM;IACjBa,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCb,OAAO,CAAC,IAAI,CAAC;IACbC,QAAQ,CAAC,QAAQ,CAAC;EACtB,CAAC;EAED,MAAMP,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAMoB,QAAQ,GAAG,MAAM5B,GAAG,CAACI,IAAI,CAACyB,UAAU,CAAC,CAAC;MAC5Cf,OAAO,CAACc,QAAQ,CAAC;IACrB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,oBACIrB,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,IAAI;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,MAAM;MAAEC;IAAY,CAAE;IAAAI,QAAA,EACvEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACtB,GAAA,CA/CWF,YAAqD;EAAA,QAE7CZ,WAAW;AAAA;AAAAqC,EAAA,GAFnBzB,YAAqD;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}