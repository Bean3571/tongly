{"ast":null,"code":"var _jsxFileName = \"C:\\\\Custom\\\\Coding\\\\tongly-basic\\\\tongly-basic\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../api/client';\nimport { useNotification } from './NotificationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  refreshUser: async () => {}\n});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  const {\n    showNotification\n  } = useNotification();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      refreshUser().catch(() => {\n        localStorage.removeItem('token');\n        setUser(null);\n        showNotification('error', 'Session expired. Please login again.');\n      });\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await api.auth.login({\n        username,\n        password\n      });\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n      showNotification('success', 'Welcome back!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Login failed:', error);\n      showNotification('error', 'Invalid username or password');\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const response = await api.auth.register({\n        username,\n        email,\n        password,\n        role: 'student'\n      });\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n      showNotification('success', 'Registration successful! Welcome to Tongly!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Registration failed:', error);\n      showNotification('error', 'Registration failed. Please try again.');\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    showNotification('info', 'You have been logged out');\n    navigate('/login');\n  };\n  const refreshUser = async () => {\n    try {\n      const userData = await api.user.getProfile();\n      setUser(userData);\n    } catch (error) {\n      console.error('Failed to refresh user data:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      refreshUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"9J4X3oc4nURFpUjzMt16umNohN0=\", false, function () {\n  return [useNavigate, useNotification];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","api","useNotification","jsxDEV","_jsxDEV","AuthContext","user","login","register","logout","refreshUser","useAuth","_s","AuthProvider","children","_s2","setUser","navigate","showNotification","token","localStorage","getItem","catch","removeItem","username","password","response","auth","setItem","error","console","email","role","userData","getProfile","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Custom/Coding/tongly-basic/tongly-basic/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { api } from '../api/client';\r\nimport { useNotification } from './NotificationContext';\r\nimport type { User } from '../types';\r\n\r\ninterface AuthContextType {\r\n    user: User | null;\r\n    login: (username: string, password: string) => Promise<void>;\r\n    register: (username: string, email: string, password: string) => Promise<void>;\r\n    logout: () => void;\r\n    refreshUser: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n    user: null,\r\n    login: async () => {},\r\n    register: async () => {},\r\n    logout: () => {},\r\n    refreshUser: async () => {},\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const [user, setUser] = useState<User | null>(null);\r\n    const navigate = useNavigate();\r\n    const { showNotification } = useNotification();\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            refreshUser().catch(() => {\r\n                localStorage.removeItem('token');\r\n                setUser(null);\r\n                showNotification('error', 'Session expired. Please login again.');\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const login = async (username: string, password: string) => {\r\n        try {\r\n            const response = await api.auth.login({ username, password });\r\n            localStorage.setItem('token', response.token);\r\n            setUser(response.user);\r\n            showNotification('success', 'Welcome back!');\r\n            navigate('/dashboard');\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            showNotification('error', 'Invalid username or password');\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const register = async (username: string, email: string, password: string) => {\r\n        try {\r\n            const response = await api.auth.register({ username, email, password, role: 'student' });\r\n            localStorage.setItem('token', response.token);\r\n            setUser(response.user);\r\n            showNotification('success', 'Registration successful! Welcome to Tongly!');\r\n            navigate('/dashboard');\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            showNotification('error', 'Registration failed. Please try again.');\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n        showNotification('info', 'You have been logged out');\r\n        navigate('/login');\r\n    };\r\n\r\n    const refreshUser = async () => {\r\n        try {\r\n            const userData = await api.user.getProfile();\r\n            setUser(userData);\r\n        } catch (error) {\r\n            console.error('Failed to refresh user data:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, register, logout, refreshUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}