#####################BACKEND

@startuml
!theme spacelab
skinparam packageBorderColor #90a4ae
skinparam packageBackgroundColor #fafafa
skinparam ArrowThickness 2

package "Входная точка" {
  [server]
}

package "Инфраструктура" {
  [Config]
  [Logger]
  [Database]
}
package "Маршрутизация" {
  [Router]
}
package "Обработчики" {
  [Handlers]
}

package "Бизнес-логика" {
  [Usecases]
}

package "Доступ к данным" {
  [Repositories]
}

package "Сущности"  {
  [Entities]
}

package "Прослойка"  {
  [Middleware]
}

[server] --> [Config]
[server] --> [Logger]
[server] --> [Database]
[server] --> [Router]
[server] --> [Handlers]
[server] --> [Usecases]
[server] --> [Repositories]

[Router] --> [Middleware]
[Middleware] --> [Handlers]
[Handlers] --> [Usecases]
[Usecases] --> [Repositories]
[Repositories] --> [Entities]

@enduml


#####################FRONTEND
@startuml
!theme spacelab
skinparam packageBorderColor #90a4ae
skinparam packageBackgroundColor #fafafa
skinparam ArrowThickness 2

package "Входная точка" {
  [App]
}

package "Инфраструктура" {
  [ThemeProvider]
  [TranslationLoader]
  [AuthProvider]
}

package "Маршрутизация" {
  [AppRoutes]
}

package "Страницы" {
  [Pages]
}

package "Компоненты" {
  [Components]
}

package "Контексты" {
  [Contexts]
}

package "Сервисы" {
  [Services]
}

package "API" {
  [apiClient]
}

[App] --> [ThemeProvider]
[App] --> [TranslationLoader]
[App] --> [AuthProvider]
[App] --> [AppRoutes]

[AppRoutes] --> [Pages]
[Pages] --> [Components]
[Pages] --> [Contexts]
[Pages] --> [Services]
[Components] --> [Contexts]
[Services] --> [apiClient]
[Contexts] --> [Services]

@enduml

####################VIDEO SERVICE

@startuml
!theme spacelab
skinparam packageBorderColor #90a4ae
skinparam packageBackgroundColor #fafafa
skinparam ArrowThickness 2

package "Входная точка" {
  [server]
}

package "Инфраструктура" {
  [Config]
  [Logger]
}

package "Обработчики" {
  [Handlers]
}

package "Бизнес-логика" {
  [WebRTC]
  [Chat]
}

[server] --> [Config]
[server] --> [Logger]
[server] --> [Handlers]
[Handlers] --> [WebRTC]
[Handlers] --> [Chat]

@enduml

################JWT
@startuml
!theme plain
actor Пользователь
participant "Клиент" as FE
participant "Сервер" as BE
database "База данных"

== Аутентификация и получение JWT ==
Пользователь -> FE : Вводит логин и пароль
FE -> BE : POST /api/auth/login {логин, пароль}
BE -> "База данных" : Проверка пользователя
"База данных" --> BE : Данные пользователя
BE -> BE : Генерация JWT (id, роль, срок)
BE --> FE : {jwt}

== Хранение токена ==
FE -> FE : Сохраняет jwt в localStorage

== Использование токена при запросах ==
Пользователь -> FE : Выполняет защищённое действие \n(бронирование урока)
FE -> BE : Запрос к API (Authorization: Bearer jwt)
BE -> BE : Middleware проверяет токен, извлекает id и роль
BE -> "База данных" : Выполнение бизнес-логики (создание урока)
"База данных" --> BE : Результат
BE --> FE : Ответ с данными
FE -> Пользователь : Отображает результат
@enduml

######################STUDENT REG
@startuml
!theme plain
actor Пользователь
participant "Клиент" as FE
participant "Сервер (API)" as BE
participant "UseCase регистрации" as UC
participant "UserRepository"
participant "StudentRepository"
database "База данных"

Пользователь -> FE : Вводит данные\nдля регистрации
FE -> BE : POST /api/auth/register \n{username, email, \npassword, role=student}
BE -> UC : Вызов RegisterStudent
UC -> UserRepository : Проверка \nusername/email
UserRepository -> "База данных" : SELECT ... \nFROM users
"База данных" --> UserRepository : Результат
UserRepository --> UC : Результат\nпроверки
UC -> UserRepository : Создание\nпользователя
UserRepository -> "База данных" : INSERT \nINTO users ...
"База данных" --> UserRepository : id пользователя
UserRepository --> UC : Новый\nпользователь
UC -> StudentRepository : Создание\nпрофиля ученика
StudentRepository -> "База данных" : INSERT \nINTO student_profiles ...
"База данных" --> StudentRepository : created_at,\nupdated_at
StudentRepository --> UC : Новый\nпрофиль ученика
UC --> BE : Новый пользователь\nсоздан
BE --> FE : Ответ с данными\nпользователя
FE -> Пользователь : Отображает\nрезультат
@enduml


#############################Wrtc

@startuml
!theme plain
actor "Ученик" as student
participant "Видео-сервис\n(сигнальный сервер)" as signaling

actor "Преподаватель" as tutor

== Инициализация соединения ==

student -> student: navigator.mediaDevices.getUserMedia()
activate student
student -> student: Создание RTCPeerConnection
student -> student: Добавление локальных медиа-треков
deactivate student

tutor -> tutor: navigator.mediaDevices.getUserMedia()
activate tutor
tutor -> tutor: Создание RTCPeerConnection
tutor -> tutor: Добавление локальных медиа-треков
deactivate tutor

== Сигнальный обмен через WebSockets ==

student -> signaling: Подключение к WebSocket
activate signaling
signaling --> student: Соединение установлено
deactivate signaling

tutor -> signaling: Подключение к WebSocket
activate signaling
signaling --> tutor: Соединение установлено
signaling -> tutor: Новый участник (ученик) в комнате
deactivate signaling

@enduml


@startuml
!theme plain
actor "Ученик" as student
participant "Видео-сервис\n(сигнальный сервер)" as signaling
actor "Преподаватель" as tutor

== Создание WebRTC-соединения ==

tutor -> tutor: pc.createOffer()
activate tutor
tutor -> tutor: pc.setLocalDescription(offer)
tutor -> signaling: Отправка SDP-предложения
deactivate tutor

signaling -> student: Передача SDP-предложения
activate student
student -> student: pc.setRemoteDescription(offer)
student -> student: pc.createAnswer()
student -> student: pc.setLocalDescription(answer)
student -> signaling: Отправка SDP-ответа
deactivate student

signaling -> tutor: Передача SDP-ответа
activate tutor
tutor -> tutor: pc.setRemoteDescription(answer)
deactivate tutor

== Обмен ICE-кандидатами ==

tutor -> tutor: pc.onicecandidate = event => {...}
activate tutor
tutor -> signaling: Отправка ICE-кандидатов
deactivate tutor

signaling -> student: Передача ICE-кандидатов
activate student
student -> student: pc.addIceCandidate(candidate)
deactivate student

student -> student: pc.onicecandidate = event => {...}
activate student
student -> signaling: Отправка ICE-кандидатов
deactivate student

signaling -> tutor: Передача ICE-кандидатов
activate tutor
tutor -> tutor: pc.addIceCandidate(candidate)
deactivate tutor

@enduml

@startuml
!theme plain
actor "Ученик" as student
participant "Видео-сервис\n(сигнальный сервер)" as signaling
actor "Преподаватель" as tutor

== Установка соединения ==

student -> student: pc.ontrack = event => {...}
tutor -> tutor: pc.ontrack = event => {...}

note over student, tutor: Установка P2P-соединения завершена

student <-> tutor: Двунаправленная передача аудио/видео
== Проверка статуса соединения ==

tutor -> tutor: pc.getStats()
student -> student: pc.getStats()

note over student, tutor: Периодическое обновление статистики соединения

== Обработка ошибок соединения ==

student -> student: pc.onconnectionstatechange = event => {...}
tutor -> tutor: pc.onconnectionstatechange = event => {...}

note over student, tutor: Мониторинг статуса соединения

== Завершение соединения ==

tutor -> tutor: pc.close()
tutor -> signaling: Закрытие WebSocket-соединения

signaling -> student: Сообщение о закрытии сессии
student -> student: pc.close()
student -> signaling: Закрытие WebSocket-соединения
@enduml